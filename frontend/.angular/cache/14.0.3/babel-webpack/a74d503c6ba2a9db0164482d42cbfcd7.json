{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nconst JWTS_LOCAL_KEY = 'JWTS_LOCAL_KEY';\nconst JWTS_ACTIVE_INDEX_KEY = 'JWTS_ACTIVE_INDEX_KEY';\nexport class AuthService {\n  url = environment.auth0.url;\n  audience = environment.auth0.audience;\n  clientId = environment.auth0.clientId;\n  callbackURL = environment.auth0.callbackURL;\n  token;\n  payload;\n\n  constructor() {}\n\n  build_login_link(callbackPath = '') {\n    let link = 'https://';\n    link += this.url + '.auth0.com';\n    link += '/authorize?';\n    link += 'audience=' + this.audience + '&';\n    link += 'response_type=token&';\n    link += 'client_id=' + this.clientId + '&';\n    link += 'redirect_uri=' + this.callbackURL + callbackPath;\n    return link;\n  } // invoked in app.component on load\n\n\n  check_token_fragment() {\n    // parse the fragment\n    const fragment = window.location.hash.substr(1).split('&')[0].split('='); // check if the fragment includes the access token\n\n    if (fragment[0] === 'access_token') {\n      // add the access token to the jwt\n      this.token = fragment[1]; // save jwts to localstore\n\n      this.set_jwt();\n    }\n  }\n\n  set_jwt() {\n    localStorage.setItem(JWTS_LOCAL_KEY, this.token);\n\n    if (this.token) {\n      this.decodeJWT(this.token);\n    }\n  }\n\n  load_jwts() {\n    this.token = localStorage.getItem(JWTS_LOCAL_KEY) || null;\n\n    if (this.token) {\n      this.decodeJWT(this.token);\n    }\n  }\n\n  activeJWT() {\n    return this.token;\n  }\n\n  decodeJWT(token) {\n    const jwtservice = new JwtHelperService();\n    this.payload = jwtservice.decodeToken(token);\n    return this.payload;\n  }\n\n  logout() {\n    this.token = '';\n    this.payload = null;\n  }\n\n  can(permission) {\n    return this.payload && this.payload.permissions && this.payload.permissions.length && this.payload.permissions.indexOf(permission) >= 0;\n  }\n\n  static ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}